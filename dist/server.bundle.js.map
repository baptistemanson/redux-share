{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d511cc7c182b5a595296","webpack:///./src/redux-share-server.js","webpack:///external \"body-parser\"","webpack:///external \"ws\"","webpack:///external \"express\""],"names":[],"mappings":"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","file":"server.bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"body-parser\"), require(\"ws\"), require(\"express\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"body-parser\", \"ws\", \"express\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReduxShareServer\"] = factory(require(\"body-parser\"), require(\"ws\"), require(\"express\"));\n\telse\n\t\troot[\"ReduxShareServer\"] = factory(root[\"body-parser\"], root[\"ws\"], root[\"express\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d511cc7c182b5a595296\n **/","\"use strict\";\nvar bodyParser = require('body-parser');\nvar WebSocketServer = require('ws').Server;\nvar express = require('express');\n\n\nclass ReduxShareServer {\n  /**\n   * Constructor of the server\n   *\n   * @param {Object} server\n   * @param {Object} options\n   */\n  constructor (server,\n               options) {\n    /**\n     * Websocket Server\n     */\n    this.wss = new WebSocketServer({server: server});\n    this.readyToServe = false;\n\n    /**\n     * Redux store to link to the clients\n     */\n    this.store = null;\n\n    let defaultOptions = {\n      //if set to true, will output debug on the console\n      debug:false,\n      //if set, this function will be called at connection time. Returns the socket.\n      onConnection:null,\n      //if set, this function will be called before receiving each action. Allow you to modify the action.\n      onActionReceived: action => action,\n      //if set, this function will filter all actions before dispatching. Returns bool.\n      shouldDispatch:() => true, \n      //if set, this function will filter all actions before sending. Returns bool.\n      shouldSend: () => true,\n      //if true dispatches all actions received to all other connected clients. Please note that the API call to state bypasses this option.\n      repeaterMode:false\n    };\n\n    this.options = Object.assign({},defaultOptions,options);\n  }\n\n  /**\n   * Return an Express middleware\n   *\n   * @returns {*}\n   */\n  getExpressMiddleware () {\n    var router = express.Router();\n\n    router.use(bodyParser.urlencoded({extended: false}));\n    router.use(bodyParser.json())\n\n    router.post('/action', function (req, res) {\n      let action = req.body;\n      this.log('Dispatching an action to the store', action);\n      \n      if(this.store) {\n        this.store.dispatch(action);\n        res.send(JSON.stringify({success: true}));\n      }\n      else {\n        let message = \"Not ready yet, did you attach the redux middleware and dispatch the action @@SERVER-LISTEN-START?\";\n        this.log(message);\n        res.send(JSON.stringify({ success: false, message:message }));\n      }\n      res.end();\n      \n    }.bind(this));\n\n    router.get('/state', function (req, res) {\n      res.send(JSON.stringify(this.store.getState(), null, 4));\n      res.end();\n    }.bind(this));\n\n    return router;\n  }\n\n  /**\n   * Get the middleware for Redux\n   * This middleware will broadcast server actions to all clients\n   *  \n   *  \n           Local      WS\n             +        +\n             |        |\n             |        |\n             v        v  onActionReceived\n        +----+--------+----+\n        |                  |\n        |                  |\n        |    Middleware    |\n        |                  |\n        |                  |\n        +--------+---------+\n                 |       ShouldDispatch?\n        +--------v---------+\n        |                  |\n        |     Reducers     |\n        |      (next)      |\n        |                  |\n        +--------+---------+\n                 |\n        +--------v---------+\n        |                  |\n        |    Middleware    |\n        |                  |\n        +--------+---------+\n                 |       ShouldSend?\n                 v\n                 WS\n\n   *\n   * @returns {Function}\n   */\n  getReduxMiddleware() {\n    return store => next => action => {\n      this.log('Action \"' + action.type + '\" received by the server redux middleware');\n\n      if(this.store === null) {\n        this.store = store;\n      }\n\n      //should dispatch?\n      if(this.options.shouldDispatch.apply(this,action) ) {\n        var result = next(action);\n      }\n      else {\n        var result = null;\n      }\n      \n      // If the action have been received, we don't send it back to the client\n      if (action.origin === undefined || action.origin === 'server') {\n        if (this.options.repeaterMode) {\n          this.broadcastAction(action);\n        }\n      }\n      if (action.type === \"@@SERVER-LISTEN-START\") this._startListen();\n      return result;\n    }\n  }\n\n  /**\n   * Finds a list of socket matching a property\n   *\n   * return [] if nothing found.\n   * @param property\n   * @param value.\n   * @returns {array}\n   */\n  findSockets(property,value) {\n    return this.wss.clients.filter(function each (socket) {\n      return (socket[property] !== undefined && socket[property] === value);\n    });\n  }\n\n  /**\n   * Broadcasts a message to all clients\n   * \n   * Bypasses the repeaterMode option.\n   * @param action\n   * @param senderSocket\n   * @returns array\n   */\n  broadcastAction(action,filter = null) {\n\n    this.log(\"Dispatches an action to all clients\", action);\n\n    if(typeof(filter) !== 'function') filter = () => true;\n    \n    return this.wss.clients.filter(filter).map(function each (socket) {\n      return this.sendToAction(action, socket);\n    }.bind(this));\n  }\n\n\n  /**\n   * Sends an action\n   * @param socket\n   * @param action\n   */\n  sendToAction(action,socket) {\n    let tracedAction = Object.assign({},action,{origin:\"server\" });\n    \n    if(this.options.shouldSend.apply(this, [tracedAction, socket])) {\n      this.log(\"Dispatches an action to a client\", tracedAction);\n      return socket.send(JSON.stringify(tracedAction));\n    }\n\n  }\n\n  /**\n  * Internal log function\n  *\n  */\n  log() {\n    if (this.options.debug) {\n        console.log(\"redux-share-server: \", ...arguments);\n      }\n  }\n\n  /**\n  * Private method to init the store\n  */\n  _startListen() {\n\n    this.wss.on('connection', function connection (socket) {\n      if (typeof(this.options.onConnection) == 'function') {\n        socket = this.options.onConnection(socket) || socket;\n      }\n\n      socket.on('message', function incoming (message) {\n        this.log(\"Received from client the message \",message);\n\n        let action = JSON.parse(message);\n\n        if (typeof(this.options.onActionReceived) == 'function') {\n          action = this.options.onActionReceived.apply(this, [action, socket])\n        }\n\n        this.log('Dispatching the action to the store', action);\n\n        this.store.dispatch(action);\n\n        if (this.options.repeaterMode) {\n          this.broadcastAction(action,s => s !== socket);\n        }\n      }.bind(this));\n\n    }.bind(this));\n    this.readyToServe = true;\n  }\n\n}\n\n\nmodule.exports = ReduxShareServer;\n\n\n/** WEBPACK FOOTER **\n ** ./src/redux-share-server.js\n **/","module.exports = require(\"body-parser\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"body-parser\"\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = require(\"ws\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ws\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}