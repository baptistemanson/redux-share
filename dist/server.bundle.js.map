{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap af2604290c9dc46c1948","webpack:///./src/redux-share-server.js","webpack:///external \"body-parser\"","webpack:///external \"ws\"","webpack:///external \"express\""],"names":["bodyParser","require","WebSocketServer","Server","express","ReduxShareServer","server","options","wss","store","defaultOptions","debug","onConnection","socket","id","socketNumber","onActionReceived","action","origin","shouldDispatch","type","shouldSend","Object","assign","readyToServe","router","Router","use","urlencoded","extended","json","post","req","res","body","log","dispatch","send","JSON","stringify","success","message","end","bind","get","getState","apply","result","next","undefined","broadcastAction","_startListen","property","value","clients","filter","each","map","sendToAction","tracedAction","arguments","on","connection","incoming","parse","s","module","exports"],"mappings":"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","file":"server.bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"body-parser\"), require(\"ws\"), require(\"express\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"body-parser\", \"ws\", \"express\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReduxShareServer\"] = factory(require(\"body-parser\"), require(\"ws\"), require(\"express\"));\n\telse\n\t\troot[\"ReduxShareServer\"] = factory(root[\"body-parser\"], root[\"ws\"], root[\"express\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap af2604290c9dc46c1948","\"use strict\";\nvar bodyParser = require('body-parser');\nvar WebSocketServer = require('ws').Server;\nvar express = require('express');\n\n\nclass ReduxShareServer {\n  /**\n   * Constructor of the server\n   *\n   * @param {Object} server\n   * @param {Object} options\n   */\n  constructor (server,\n               options) {\n    /**\n     * Websocket Server\n     */\n    this.wss = new WebSocketServer({server: server});\n\n    /**\n     * Redux store to link to the clients\n     */\n    this.store = null;\n\n    let defaultOptions = {\n      //if set to true, will output debug on the console\n      debug: false,\n      //if set, this function will be called at connection time. Returns the socket.\n      onConnection: (socket) => { socket.id = this.socketNumber++; return socket; },\n      //if set, this function will be called before receiving each action. Allow you to modify the action.\n      onActionReceived: (action, socket) => { action.origin = socket.id; return action; },\n      //if set, this function will filter all actions before dispatching. Returns bool.\n      shouldDispatch: action => (action.type !== '@@SYNC-CONNECT-SERVER-SUCCESS'),\n      //if set, this function will filter all actions before sending. Returns bool.\n      shouldSend: () => true,\n    };\n\n    this.options = Object.assign({}, defaultOptions, options);\n\n    //internal state\n    this.readyToServe = false;\n    this.socketNumber = 0;\n  }\n\n  /**\n   * Return an Express middleware\n   *\n   * @returns {*}\n   */\n  getExpressMiddleware () {\n    var router = express.Router();\n\n    router.use(bodyParser.urlencoded({extended: false}));\n    router.use(bodyParser.json())\n\n    router.post('/action', function (req, res) {\n      let action = req.body;\n      this.log('Dispatching an action to the store', action);\n\n      if(this.store) {\n        this.store.dispatch(action);\n        res.send(JSON.stringify({success: true}));\n      }\n      else {\n        let message = \"Not ready yet, did you attach the redux middleware and dispatch the action @@SERVER-LISTEN-START?\";\n        this.log(message);\n        res.send(JSON.stringify({ success: false, message:message }));\n      }\n      res.end();\n\n    }.bind(this));\n\n    router.get('/state', function (req, res) {\n      res.send(JSON.stringify(this.store.getState(), null, 4));\n      res.end();\n    }.bind(this));\n\n    return router;\n  }\n\n  /**\n   * Get the middleware for Redux\n   * This middleware will broadcast server actions to all clients\n   *\n   *\n\n      store.dispatch  WS\n             |        |\n             |  onActionReceived()\n             |        |\n             v        v\n        +------------------+\n        |                  |\n        |                  |\n        |    Middleware    |\n        |                  |\n        |                  |\n        +--------+---------+\n                 |\n         ShouldDispatch()? --------+\n                 |                 |\n      (next middleware...then)     |\n        +--------v---------+       |\n        |                  |       |\n        |                  |       |\n        |     Reducers     |       |\n        |                  |       |\n        |                  |       |\n        +--------+---------+       |\n                 |                 |\n                 |<----------------+\n                 |\n        +--------v---------+\n        |                  |\n        |    Middleware    |\n        |                  |\n        +--------+---------+\n                 |\n                 V\n            ShouldSend()?\n                 |\n                 V\n                 WS\n   *\n   * @returns {Function}\n   */\n  getReduxMiddleware() {\n    return store => next => action => {\n      this.log('Action \"' + action.type + '\" received by the redux middleware');\n\n      if(this.store === null) {\n        this.store = store;\n      }\n\n      //should dispatch?\n      if(this.options.shouldDispatch.apply(this,[action]) ) {\n        this.log(\"We dispatch this action \");\n        var result = next(action);\n      }\n      else {\n        this.log(\"We dont dispatch this action \");\n        var result = null;\n      }\n\n      // If the action have been received, we don't send it back to the client\n      if (action.origin === undefined || action.origin === 'server') {\n        this.broadcastAction(action);\n      }\n      if (action.type === \"@@SERVER-LISTEN-START\") this._startListen();\n      return result;\n    }\n  }\n\n  /**\n   * Finds a list of socket matching a property\n   *\n   * return [] if nothing found.\n   * @param property\n   * @param value.\n   * @returns {array}\n   */\n  findSockets(property,value) {\n    return this.wss.clients.filter(function each (socket) {\n      return (socket[property] !== undefined && socket[property] === value);\n    });\n  }\n\n  /**\n   * Broadcasts a message to all clients\n   *\n   * @param action\n   * @param senderSocket\n   * @returns array\n   */\n  broadcastAction(action,filter = null) {\n\n    this.log(\"Dispatches an action to all clients\", action);\n\n    if(typeof(filter) !== 'function') filter = () => true;\n\n    return this.wss.clients.filter(filter).map(function each (socket) {\n      return this.sendToAction(action, socket);\n    }.bind(this));\n  }\n\n\n  /**\n   * Sends an action\n   * @param socket\n   * @param action\n   */\n  sendToAction(action,socket) {\n    let tracedAction = Object.assign({},action,{origin:\"server\" });\n\n    if(this.options.shouldSend.apply(this, [tracedAction, socket])) {\n      this.log(\"Send to client \", socket.id,\" \",tracedAction);\n      return socket.send(JSON.stringify(tracedAction));\n    }\n    else {\n      this.log(\"Do not send to client \", socket.id, \" \",tracedAction);\n    }\n\n  }\n\n  /**\n  * Internal log function\n  *\n  */\n  log() {\n    if (this.options.debug) {\n        console.log(\"redux-share-server: \", ...arguments);\n      }\n  }\n\n  /**\n  * Private method to init the store\n  */\n  _startListen() {\n\n    this.wss.on('connection', function connection (socket) {\n      if (typeof(this.options.onConnection) == 'function') {\n        socket = this.options.onConnection(socket) || socket;\n      }\n\n      socket.on('message', function incoming (message) {\n        this.log(\"Received from client the message \",message);\n\n        let action = JSON.parse(message);\n\n        if (typeof(this.options.onActionReceived) == 'function') {\n\n          action = this.options.onActionReceived.apply(this, [action, socket])\n        }\n\n        this.log('Dispatching the action to the store', action);\n\n        if(this.store) {\n          this.store.dispatch(action);\n        }\n        else {\n          this.log('Store not ready yet, did you forget to add the redux middleware?')\n        }\n\n        this.broadcastAction(action,s => s !== socket);\n      }.bind(this));\n\n    }.bind(this));\n    this.readyToServe = true;\n  }\n\n}\n\nmodule.exports = ReduxShareServer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/redux-share-server.js","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"ws\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ws\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}